//
//  FastDCT.c
//  NewEntropyCoding_Enc
//
//  Created by Chang Sun on 2014-01-07.
//  Copyright (c) 2014 University of Waterloo. All rights reserved.
//

#include "FastDCT.h"

double _C[8] = { 0.707106781186548f,0.98078528040323f, 0.923879532511287f,0.831469612302545f,
0.707106781186548f, 0.555570233019602f, 0.38268343236509f, 0.195090322016128f };


void FDCT(double d[8][8])
{
	double f[8], bar;
	double _DC26, _SC26;

	_DC26 = _C[2] - _C[6];
	_SC26 = _C[2] + _C[6];

	for (int y = 0; y<8; y++)
	{
		f[0] = d[y][0] + d[y][7], f[7] = d[y][0] - d[y][7];
		f[1] = d[y][1] + d[y][6], f[6] = d[y][1] - d[y][6];
		f[2] = d[y][2] + d[y][5], f[5] = d[y][2] - d[y][5];
		f[3] = d[y][3] + d[y][4], f[4] = d[y][3] - d[y][4];

		bar = f[0], f[0] += f[3], f[3] = bar - f[3];
		bar = f[1], f[1] += f[2], f[2] = bar - f[2];

		d[y][0] = f[0] + f[1], d[y][4] = f[0] - f[1];
		f[2] = (f[2] + f[3])*_C[4];
		d[y][2] = f[2] + f[3], d[y][6] = f[3] - f[2];

		f[4] = f[4] + f[5], f[5] = (f[5] + f[6])*_C[4], f[6] += f[7];

		bar = (f[4] - f[6])*_C[6], f[4] = f[4] * _DC26 + bar, f[6] = f[6] * _SC26 + bar;
		bar = f[5], f[5] += f[7], f[7] -= bar;

		d[y][5] = f[4] + f[7], d[y][3] = f[7] - f[4];
		d[y][1] = f[5] + f[6], d[y][7] = f[5] - f[6];
	}

	for (int x = 0; x<8; x++)
	{
		f[0] = d[0][x] + d[7][x], f[7] = d[0][x] - d[7][x];
		f[1] = d[1][x] + d[6][x], f[6] = d[1][x] - d[6][x];
		f[2] = d[2][x] + d[5][x], f[5] = d[2][x] - d[5][x];
		f[3] = d[3][x] + d[4][x], f[4] = d[3][x] - d[4][x];

		bar = f[0], f[0] += f[3], f[3] = bar - f[3];
		bar = f[1], f[1] += f[2], f[2] = bar - f[2];

		d[0][x] = f[0] + f[1], d[4][x] = f[0] - f[1];
		f[2] = (f[2] + f[3])*_C[4];
		d[2][x] = f[2] + f[3], d[6][x] = f[3] - f[2];

		f[4] = f[4] + f[5], f[5] = (f[5] + f[6])*_C[4], f[6] += f[7];

		bar = (f[4] - f[6])*_C[6], f[4] = f[4] * _DC26 + bar, f[6] = f[6] * _SC26 + bar;
		bar = f[5], f[5] += f[7], f[7] -= bar;

		d[5][x] = f[4] + f[7], d[3][x] = f[7] - f[4];
		d[1][x] = f[5] + f[6], d[7][x] = f[5] - f[6];
	}
}

void IDCT(double d[8][8])
{
	double f[8], bar;
	double _DC26, _SC26;

	_DC26 = _C[2] - _C[6];
	_SC26 = _C[2] + _C[6];

	for (int x = 0; x<8; x++)
	{
		f[2] = (d[2][x] - d[6][x])*_C[4], f[3] = d[2][x] + d[6][x];
		f[0] = d[0][x] + d[4][x], f[1] = d[0][x] - d[4][x];
		f[3] += f[2];
		bar = f[0], f[0] += f[3], f[3] = bar - f[3];
		bar = f[1], f[1] += f[2], f[2] = bar - f[2];

		f[4] = d[5][x] - d[3][x], f[7] = d[5][x] + d[3][x];
		f[5] = d[1][x] + d[7][x], f[6] = d[1][x] - d[7][x];
		bar = f[5], f[5] = (f[5] - f[7])*_C[4], f[7] += bar;
		bar = (f[4] + f[6])*_C[6], f[4] = f[4] * _DC26 + bar, f[6] = f[6] * _SC26 - bar;
		f[7] += f[6], f[6] += f[5], f[5] += f[4];

		d[0][x] = f[0] + f[7], d[7][x] = f[0] - f[7];
		d[1][x] = f[1] + f[6], d[6][x] = f[1] - f[6];
		d[2][x] = f[2] + f[5], d[5][x] = f[2] - f[5];
		d[3][x] = f[3] + f[4], d[4][x] = f[3] - f[4];
	}

	for (int y = 0; y<8; y++)
	{
		f[2] = (d[y][2] - d[y][6])*_C[4], f[3] = d[y][2] + d[y][6];
		f[0] = d[y][0] + d[y][4], f[1] = d[y][0] - d[y][4];
		f[3] += f[2];
		bar = f[0], f[0] += f[3], f[3] = bar - f[3];
		bar = f[1], f[1] += f[2], f[2] = bar - f[2];

		f[4] = d[y][5] - d[y][3], f[7] = d[y][5] + d[y][3];
		f[5] = d[y][1] + d[y][7], f[6] = d[y][1] - d[y][7];
		bar = f[5], f[5] = (f[5] - f[7])*_C[4], f[7] += bar;
		bar = (f[4] + f[6])*_C[6], f[4] = f[4] * _DC26 + bar, f[6] = f[6] * _SC26 - bar;
		f[7] += f[6], f[6] += f[5], f[5] += f[4];

		d[y][0] = f[0] + f[7], d[y][7] = f[0] - f[7];
		d[y][1] = f[1] + f[6], d[y][6] = f[1] - f[6];
		d[y][2] = f[2] + f[5], d[y][5] = f[2] - f[5];
		d[y][3] = f[3] + f[4], d[y][4] = f[3] - f[4];
	}
}